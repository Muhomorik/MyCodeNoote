// Implementation file for parser generated by fsyacc
module TheParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "parser.fsy"

open Ast

# 10 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | IS
  | DISPLAY
  | ACCEPT
  | STOP
  | IF
  | END_IF
  | PROCEDURE
  | DATA
  | WORKING_STORAGE
  | IDENTIFICATION
  | PROGRAM_ID
  | AUTHOR
  | EOF
  | LITERAL of (string)
  | SLOT of (string)
  | ID of (string)
  | NUMBER of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_IS
    | TOKEN_DISPLAY
    | TOKEN_ACCEPT
    | TOKEN_STOP
    | TOKEN_IF
    | TOKEN_END_IF
    | TOKEN_PROCEDURE
    | TOKEN_DATA
    | TOKEN_WORKING_STORAGE
    | TOKEN_IDENTIFICATION
    | TOKEN_PROGRAM_ID
    | TOKEN_AUTHOR
    | TOKEN_EOF
    | TOKEN_LITERAL
    | TOKEN_SLOT
    | TOKEN_ID
    | TOKEN_NUMBER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_identification
    | NONTERM_data
    | NONTERM_sections
    | NONTERM_slotDeclarations
    | NONTERM_slot
    | NONTERM_procedures
    | NONTERM_statements
    | NONTERM_op
    | NONTERM_condition
    | NONTERM_command

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | IS  -> 0 
  | DISPLAY  -> 1 
  | ACCEPT  -> 2 
  | STOP  -> 3 
  | IF  -> 4 
  | END_IF  -> 5 
  | PROCEDURE  -> 6 
  | DATA  -> 7 
  | WORKING_STORAGE  -> 8 
  | IDENTIFICATION  -> 9 
  | PROGRAM_ID  -> 10 
  | AUTHOR  -> 11 
  | EOF  -> 12 
  | LITERAL _ -> 13 
  | SLOT _ -> 14 
  | ID _ -> 15 
  | NUMBER _ -> 16 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_IS 
  | 1 -> TOKEN_DISPLAY 
  | 2 -> TOKEN_ACCEPT 
  | 3 -> TOKEN_STOP 
  | 4 -> TOKEN_IF 
  | 5 -> TOKEN_END_IF 
  | 6 -> TOKEN_PROCEDURE 
  | 7 -> TOKEN_DATA 
  | 8 -> TOKEN_WORKING_STORAGE 
  | 9 -> TOKEN_IDENTIFICATION 
  | 10 -> TOKEN_PROGRAM_ID 
  | 11 -> TOKEN_AUTHOR 
  | 12 -> TOKEN_EOF 
  | 13 -> TOKEN_LITERAL 
  | 14 -> TOKEN_SLOT 
  | 15 -> TOKEN_ID 
  | 16 -> TOKEN_NUMBER 
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_identification 
    | 4 -> NONTERM_identification 
    | 5 -> NONTERM_data 
    | 6 -> NONTERM_sections 
    | 7 -> NONTERM_slotDeclarations 
    | 8 -> NONTERM_slotDeclarations 
    | 9 -> NONTERM_slot 
    | 10 -> NONTERM_procedures 
    | 11 -> NONTERM_statements 
    | 12 -> NONTERM_statements 
    | 13 -> NONTERM_op 
    | 14 -> NONTERM_condition 
    | 15 -> NONTERM_command 
    | 16 -> NONTERM_command 
    | 17 -> NONTERM_command 
    | 18 -> NONTERM_command 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19 
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | IS  -> "IS" 
  | DISPLAY  -> "DISPLAY" 
  | ACCEPT  -> "ACCEPT" 
  | STOP  -> "STOP" 
  | IF  -> "IF" 
  | END_IF  -> "END_IF" 
  | PROCEDURE  -> "PROCEDURE" 
  | DATA  -> "DATA" 
  | WORKING_STORAGE  -> "WORKING_STORAGE" 
  | IDENTIFICATION  -> "IDENTIFICATION" 
  | PROGRAM_ID  -> "PROGRAM_ID" 
  | AUTHOR  -> "AUTHOR" 
  | EOF  -> "EOF" 
  | LITERAL _ -> "LITERAL" 
  | SLOT _ -> "SLOT" 
  | ID _ -> "ID" 
  | NUMBER _ -> "NUMBER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | IS  -> (null : System.Object) 
  | DISPLAY  -> (null : System.Object) 
  | ACCEPT  -> (null : System.Object) 
  | STOP  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | END_IF  -> (null : System.Object) 
  | PROCEDURE  -> (null : System.Object) 
  | DATA  -> (null : System.Object) 
  | WORKING_STORAGE  -> (null : System.Object) 
  | IDENTIFICATION  -> (null : System.Object) 
  | PROGRAM_ID  -> (null : System.Object) 
  | AUTHOR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SLOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 2us; 4us; 1us; 65535us; 15us; 16us; 1us; 65535us; 17us; 18us; 2us; 65535us; 17us; 19us; 18us; 20us; 2us; 65535us; 2us; 3us; 4us; 5us; 2us; 65535us; 24us; 25us; 39us; 27us; 1us; 65535us; 30us; 31us; 1us; 65535us; 38us; 39us; 4us; 65535us; 24us; 26us; 25us; 28us; 27us; 28us; 39us; 26us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 11us; 14us; 17us; 20us; 22us; 24us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 2us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 2us; 6us; 8us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 2us; 10us; 12us; 1us; 11us; 2us; 12us; 18us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 2us; 15us; 16us; 2us; 15us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 56us; 58us; 61us; 63us; 65us; 67us; 69us; 71us; 74us; 77us; 79us; 81us; 83us; 85us; 87us; |]
let _fsyacc_action_rows = 41
let _fsyacc_actionTableElements = [|1us; 32768us; 9us; 6us; 0us; 49152us; 2us; 32768us; 6us; 24us; 7us; 15us; 0us; 16385us; 1us; 32768us; 6us; 24us; 0us; 16386us; 2us; 32768us; 10us; 7us; 11us; 11us; 1us; 32768us; 15us; 8us; 1us; 32768us; 11us; 9us; 1us; 32768us; 15us; 10us; 0us; 16387us; 1us; 32768us; 15us; 12us; 1us; 32768us; 10us; 13us; 1us; 32768us; 15us; 14us; 0us; 16388us; 1us; 32768us; 8us; 17us; 0us; 16389us; 1us; 32768us; 16us; 21us; 1us; 16390us; 16us; 21us; 0us; 16391us; 0us; 16392us; 1us; 32768us; 15us; 22us; 1us; 32768us; 16us; 23us; 0us; 16393us; 3us; 32768us; 1us; 33us; 2us; 36us; 4us; 38us; 3us; 16394us; 1us; 33us; 2us; 36us; 4us; 38us; 0us; 16395us; 4us; 32768us; 1us; 33us; 2us; 36us; 4us; 38us; 5us; 40us; 0us; 16396us; 0us; 16397us; 1us; 32768us; 0us; 29us; 1us; 32768us; 15us; 32us; 0us; 16398us; 1us; 32768us; 13us; 34us; 1us; 16399us; 15us; 35us; 0us; 16400us; 1us; 32768us; 15us; 37us; 0us; 16401us; 1us; 32768us; 15us; 30us; 3us; 32768us; 1us; 33us; 2us; 36us; 4us; 38us; 0us; 16402us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 6us; 7us; 9us; 10us; 13us; 15us; 17us; 19us; 20us; 22us; 24us; 26us; 27us; 29us; 30us; 32us; 34us; 35us; 36us; 38us; 40us; 41us; 45us; 49us; 50us; 55us; 56us; 57us; 59us; 61us; 62us; 64us; 66us; 67us; 69us; 70us; 72us; 76us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 5us; 5us; 2us; 2us; 1us; 2us; 3us; 2us; 1us; 2us; 1us; 3us; 2us; 3us; 2us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 4us; 5us; 5us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 16388us; 65535us; 16389us; 65535us; 65535us; 16391us; 16392us; 65535us; 65535us; 16393us; 65535us; 65535us; 16395us; 65535us; 16396us; 16397us; 65535us; 65535us; 16398us; 65535us; 65535us; 16400us; 65535us; 16401us; 65535us; 65535us; 16402us; |]
let _fsyacc_reductions ()  =    [| 
# 190 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cobolSourceProgram)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 199 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identification)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'procedures)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "parser.fsy"
                                                     
                          { 
                            IdentDiv = _1; 
                            ProcDiv = Some(_2); 
                            EnvDiv = None; 
                            DataDiv = None; 
                            NestedCobolProg = None; 
                           } 
                         
                   )
# 19 "parser.fsy"
                 : cobolSourceProgram));
# 219 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identification)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'data)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'procedures)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "parser.fsy"
                                                          
                         { 
                           IdentDiv = _1; 
                           ProcDiv = Some(_3); 
                           EnvDiv = None; 
                           DataDiv = Some(_2); 
                           NestedCobolProg = None; 
                         } 
                       
                   )
# 28 "parser.fsy"
                 : cobolSourceProgram));
# 240 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "parser.fsy"
                                                                  
                         { 
                           ProgramId = _3; 
                           Author = Some(_5); 
                           Installation = None; 
                           DateWritten = None; 
                           DateCompiled = None; 
                         } 
                       
                   )
# 39 "parser.fsy"
                 : 'identification));
# 260 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "parser.fsy"
                                                                  
                         { 
                           ProgramId = _5; 
                           Author = Some(_3); 
                           Installation = None; 
                           DateWritten = None; 
                           DateCompiled = None; 
                         } 
                       
                   )
# 48 "parser.fsy"
                 : 'identification));
# 280 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'sections)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "parser.fsy"
                                           _2 
                   )
# 58 "parser.fsy"
                 : 'data));
# 291 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'slotDeclarations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "parser.fsy"
                                                            [WorkStorage(_2)] 
                   )
# 61 "parser.fsy"
                 : 'sections));
# 302 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'slot)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "parser.fsy"
                                [_1] 
                   )
# 64 "parser.fsy"
                 : 'slotDeclarations));
# 313 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'slotDeclarations)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'slot)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "parser.fsy"
                                                 _2 :: _1 
                   )
# 65 "parser.fsy"
                 : 'slotDeclarations));
# 325 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "parser.fsy"
                                            { Index = _1; Name = _2; Size = _3; } 
                   )
# 68 "parser.fsy"
                 : 'slot));
# 338 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "parser.fsy"
                                                        _2 
                   )
# 70 "parser.fsy"
                 : 'procedures));
# 349 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "parser.fsy"
                                   [_1] 
                   )
# 73 "parser.fsy"
                 : 'statements));
# 360 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "parser.fsy"
                                              _1 @ [_2] 
                   )
# 74 "parser.fsy"
                 : 'statements));
# 372 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "parser.fsy"
                              Is 
                   )
# 76 "parser.fsy"
                 : 'op));
# 382 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "parser.fsy"
                                    Comparison(_1, _2, _3) 
                   )
# 79 "parser.fsy"
                 : 'condition));
# 395 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "parser.fsy"
                                              DisplayStatement(_2) 
                   )
# 82 "parser.fsy"
                 : 'command));
# 406 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "parser.fsy"
                                              FormatDisplayStatement(_2, _3) 
                   )
# 83 "parser.fsy"
                 : 'command));
# 418 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "parser.fsy"
                                     AcceptStatement(_2) 
                   )
# 84 "parser.fsy"
                 : 'command));
# 429 "parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "parser.fsy"
                                                          IfStatement { Condition = _2; IfBranch = _3; ElseBranch = None } 
                   )
# 85 "parser.fsy"
                 : 'command));
|]
# 442 "parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : cobolSourceProgram =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
